

@model RestaurantTableSystem.Models.Restaurant

@{
    ViewBag.Title = "Đăng ký Doanh nghiệp";
}

<!DOCTYPE html>
<html lang="vi">
<head>
    <meta charset="UTF-8">
    <title>@ViewBag.Title</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://unpkg.com/leaflet/dist/leaflet.css" />
    <link rel="stylesheet" href="https://unpkg.com/leaflet-minimap/dist/Control.MiniMap.min.css" />
    <style>
        #map {
            height: 300px;
            width: 100%;
            margin-bottom: 15px;
        }
    </style>
</head>
<body class="bg-light">
    <div class="container mt-5">
        <div class="row justify-content-center">
            <div class="col-md-8">
                <div class="card shadow-lg p-4">
                    <h2 class="text-center mb-4">@ViewBag.Title</h2>

                    @if (TempData["Success"] != null)
                    {
                        <div class="alert alert-danger">@TempData["Success"]</div>
                    }

                    @*@using (Html.BeginForm("Index", "Business", FormMethod.Post))*@
                    @using (Html.BeginForm("Index", "Businesss", FormMethod.Post, new { enctype = "multipart/form-data" }))

                    {
                        @Html.AntiForgeryToken()
                        @Html.ValidationSummary(true, "", new { @class = "text-danger" })

                        <div class="mb-3">
                            @Html.LabelFor(m => m.name, new { @class = "form-label" })
                            @Html.TextBoxFor(m => m.name, new { @class = "form-control", required = "required" })
                        </div>

                        <div class="mb-3">
                            @Html.LabelFor(m => m.address, new { @class = "form-label" })
                            @Html.TextBoxFor(m => m.address, new { @class = "form-control", required = "required", id = "address" })
                        </div>

                        <div id="map"></div>
                        <input type="hidden" id="latitude" name="latitude" />
                        <input type="hidden" id="longitude" name="longitude" />

                        <div class="mb-3">
                            @Html.LabelFor(m => m.description, new { @class = "form-label" })
                            @Html.TextAreaFor(m => m.description, new { @class = "form-control", rows = 3 })
                        </div>

                        <div class="mb-3">
                            @Html.LabelFor(m => m.max_tables, new { @class = "form-label" })
                            @Html.TextBoxFor(m => m.max_tables, new { @class = "form-control", type = "number", required = "required" })
                        </div>

                        <div class="mb-3">
                            @Html.LabelFor(m => m.opening_hours, new { @class = "form-label" })
                            @Html.TextBoxFor(m => m.opening_hours, new { @class = "form-control", required = "required" })
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Hình ảnh Doanh nghiệp</label>
                            <input type="file" name="ImageUpload" class="form-control" accept="image/*" />
                        </div>

                        <button type="submit" class="btn btn-primary w-100">Đăng ký</button>
                    }
                </div>
            </div>
        </div>
    </div>

    <script src="https://unpkg.com/leaflet/dist/leaflet.js"></script>
    <script src="https://unpkg.com/leaflet-minimap/dist/Control.MiniMap.min.js"></script>
    <script>
        const mainLayer = L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
            maxZoom: 19,
            attribution: '&copy; OpenStreetMap contributors'
        });

        const map = L.map('map', {
            layers: [mainLayer],
            center: [15.0, 108.0],
            zoom: 13
        });

        let marker = L.marker([15.0, 108.0], { draggable: true }).addTo(map);

        const miniMapLayer = L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png');
        const miniMap = new L.Control.MiniMap(miniMapLayer, { toggleDisplay: true }).addTo(map);

        document.getElementById("latitude").value = 15.0;
        document.getElementById("longitude").value = 108.0;

        marker.on('dragend', function () {
            const latlng = marker.getLatLng();
            document.getElementById("latitude").value = latlng.lat;
            document.getElementById("longitude").value = latlng.lng;
        });

        document.getElementById("address").addEventListener("change", function () {
            const address = this.value;
            fetch(`https://nominatim.openstreetmap.org/search?format=json&q=${encodeURIComponent(address)}`)
                .then(response => response.json())
                .then(data => {
                    if (data && data.length > 0) {
                        const lat = parseFloat(data[0].lat);
                        const lon = parseFloat(data[0].lon);
                        map.setView([lat, lon], 15);
                        marker.setLatLng([lat, lon]);
                        document.getElementById("latitude").value = lat;
                        document.getElementById("longitude").value = lon;
                    } else {
                        alert("Không tìm thấy vị trí");
                    }
                })
                .catch(err => {
                    console.error(err);
                    alert("Lỗi khi tìm kiếm địa chỉ");
                });
        });

        map.on("click", function (e) {
            const lat = e.latlng.lat;
            const lng = e.latlng.lng;
            marker.setLatLng([lat, lng]);
            document.getElementById("latitude").value = lat;
            document.getElementById("longitude").value = lng;
        });
    </script>
</body>
</html>